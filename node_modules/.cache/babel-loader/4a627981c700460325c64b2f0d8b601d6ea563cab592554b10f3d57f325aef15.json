{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oldma\\\\OneDrive\\\\Documents\\\\DATA101---Data-Visualization-Dashboard-Project\\\\src\\\\components\\\\WorldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = ({\n  dataType\n}) => {\n  _s();\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [cancerData, setCancerData] = useState([]);\n  const [error, setError] = useState('');\n\n  // Load GeoJSON\n  useEffect(() => {\n    fetch('/data/custom.geo.json').then(response => response.json()).then(data => setGeoJsonData(data)).catch(err => setError('Error loading GeoJSON data: ' + err));\n  }, []);\n\n  // Load CSV data\n  useEffect(() => {\n    const fileName = dataType === 'lung' ? '/data/lung_cancer_prediction_dataset.csv' : '/data/thyroid_cancer_risk_data.csv';\n    Papa.parse(fileName, {\n      download: true,\n      header: true,\n      complete: result => setCancerData(result.data),\n      error: err => setError('Error loading CSV: ' + err)\n    });\n  }, [dataType]);\n\n  // Match Cancer Data to Countries\n  const getColor = countryName => {\n    const countryData = cancerData.find(item => item.country === countryName || item.Country === countryName);\n    const value = countryData ? parseFloat(countryData[dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate']) : 0;\n    return value > 200 ? '#800026' : value > 150 ? '#BD0026' : value > 100 ? '#E31A1C' : value > 50 ? '#FC4E2A' : value > 20 ? '#FD8D3C' : '#FFEDA0';\n  };\n  const onEachCountry = (feature, layer) => {\n    const countryName = feature.properties.name;\n    const color = getColor(countryName);\n    layer.setStyle({\n      fillColor: color,\n      weight: 1,\n      opacity: 1,\n      color: 'white',\n      fillOpacity: 0.7\n    });\n    layer.on({\n      click: () => alert(`Clicked on: ${countryName}`),\n      mouseover: e => {\n        const layer = e.target;\n        layer.setStyle({\n          weight: 3,\n          color: '#666'\n        });\n      },\n      mouseout: e => {\n        const layer = e.target;\n        layer.setStyle({\n          weight: 1,\n          color: 'white'\n        });\n      }\n    });\n  };\n  if (error) {\n    return /*#__PURE__*/_jsxDEV(\"p\", {\n      children: error\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 81,\n      columnNumber: 12\n    }, this);\n  }\n  return /*#__PURE__*/_jsxDEV(MapContainer, {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    zoom: 2,\n    center: [20, 0],\n    children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n      url: \"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 86,\n      columnNumber: 7\n    }, this), geoJsonData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n      data: geoJsonData,\n      onEachFeature: onEachCountry\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 90,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 85,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"/g5EYlVhyLojeNaXyNSkzdF2k1w=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","Papa","jsxDEV","_jsxDEV","WorldMap","dataType","_s","geoJsonData","setGeoJsonData","cancerData","setCancerData","error","setError","fetch","then","response","json","data","catch","err","fileName","parse","download","header","complete","result","getColor","countryName","countryData","find","item","country","Country","value","parseFloat","onEachCountry","feature","layer","properties","name","color","setStyle","fillColor","weight","opacity","fillOpacity","on","click","alert","mouseover","e","target","mouseout","children","_jsxFileName","lineNumber","columnNumber","style","width","height","zoom","center","url","onEachFeature","_c","$RefreshReg$"],"sources":["C:/Users/oldma/OneDrive/Documents/DATA101---Data-Visualization-Dashboard-Project/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\r\nimport Papa from 'papaparse';\r\n\r\nconst WorldMap = ({ dataType }) => {\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n  const [cancerData, setCancerData] = useState([]);\r\n  const [error, setError] = useState('');\r\n\r\n  // Load GeoJSON\r\n  useEffect(() => {\r\n    fetch('/data/custom.geo.json')\r\n      .then(response => response.json())\r\n      .then(data => setGeoJsonData(data))\r\n      .catch(err => setError('Error loading GeoJSON data: ' + err));\r\n  }, []);\r\n\r\n  // Load CSV data\r\n  useEffect(() => {\r\n    const fileName = dataType === 'lung'\r\n      ? '/data/lung_cancer_prediction_dataset.csv'\r\n      : '/data/thyroid_cancer_risk_data.csv';\r\n\r\n    Papa.parse(fileName, {\r\n      download: true,\r\n      header: true,\r\n      complete: (result) => setCancerData(result.data),\r\n      error: (err) => setError('Error loading CSV: ' + err),\r\n    });\r\n  }, [dataType]);\r\n\r\n  // Match Cancer Data to Countries\r\n  const getColor = (countryName) => {\r\n    const countryData = cancerData.find((item) =>\r\n      item.country === countryName || item.Country === countryName\r\n    );\r\n    const value = countryData\r\n      ? parseFloat(countryData[dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate'])\r\n      : 0;\r\n\r\n    return value > 200 ? '#800026' :\r\n           value > 150 ? '#BD0026' :\r\n           value > 100 ? '#E31A1C' :\r\n           value > 50  ? '#FC4E2A' :\r\n           value > 20  ? '#FD8D3C' :\r\n                         '#FFEDA0';\r\n  };\r\n\r\n  const onEachCountry = (feature, layer) => {\r\n    const countryName = feature.properties.name;\r\n    const color = getColor(countryName);\r\n\r\n    layer.setStyle({\r\n      fillColor: color,\r\n      weight: 1,\r\n      opacity: 1,\r\n      color: 'white',\r\n      fillOpacity: 0.7\r\n    });\r\n\r\n    layer.on({\r\n      click: () => alert(`Clicked on: ${countryName}`),\r\n      mouseover: (e) => {\r\n        const layer = e.target;\r\n        layer.setStyle({\r\n          weight: 3,\r\n          color: '#666',\r\n        });\r\n      },\r\n      mouseout: (e) => {\r\n        const layer = e.target;\r\n        layer.setStyle({\r\n          weight: 1,\r\n          color: 'white',\r\n        });\r\n      }\r\n    });\r\n  };\r\n\r\n  if (error) {\r\n    return <p>{error}</p>;\r\n  }\r\n\r\n  return (\r\n    <MapContainer style={{ width: '100vw', height: '100vh' }} zoom={2} center={[20, 0]}>\r\n      <TileLayer\r\n        url=\"https://{s}.tile.openstreetmap.org/{z}/{x}/{y}.png\"\r\n      />\r\n      {geoJsonData && (\r\n        <GeoJSON data={geoJsonData} onEachFeature={onEachCountry} />\r\n      )}\r\n    </MapContainer>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}