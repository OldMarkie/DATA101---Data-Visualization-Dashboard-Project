{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oldma\\\\OneDrive\\\\Documents\\\\DATA101---Data-Visualization-Dashboard-Project\\\\src\\\\components\\\\WorldMap.js\",\n  _s2 = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON, useMap } from 'react-leaflet';\nimport Papa from 'papaparse';\nimport Modal from 'react-modal';\nimport FilterPanel from './FilterPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nModal.setAppElement('#root');\nconst WorldMap = () => {\n  _s2();\n  var _s = $RefreshSig$();\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [thyroidCountries, setThyroidCountries] = useState(new Set());\n  const [lungCountries, setLungCountries] = useState(new Set());\n  const [selectedCountry, setSelectedCountry] = useState(null);\n  const [dataType, setDataType] = useState('lung');\n  const [modalIsOpen, setModalIsOpen] = useState(false);\n  const [mapInteractive, setMapInteractive] = useState(true);\n  const [sideMenuOpen, setSideMenuOpen] = useState(false); // State for side menu visibility\n\n  const normalizeCountryName = name => {\n    const countryMap = {\n      'usa': 'United States of America',\n      'uk': 'United Kingdom',\n      'dr congo': 'Dem. Rep. Congo'\n    };\n    return countryMap[name.toLowerCase().trim()] || name.trim();\n  };\n  useEffect(() => {\n    fetch('/data/custom.geo.json').then(response => response.json()).then(data => setGeoJsonData(data)).catch(err => console.error('Error loading GeoJSON:', err));\n    fetch('/data/thyroid_cancer_risk_data.csv').then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => {\n          const countries = new Set(results.data.map(row => normalizeCountryName(row.Country)));\n          setThyroidCountries(countries);\n        }\n      });\n    }).catch(err => console.error('Error loading Thyroid CSV:', err));\n    fetch('/data/lung_cancer_prediction_dataset.csv').then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => {\n          const countries = new Set(results.data.map(row => normalizeCountryName(row.Country)));\n          setLungCountries(countries);\n        }\n      });\n    }).catch(err => console.error('Error loading Lung CSV:', err));\n  }, []);\n  const getCountryStyle = feature => {\n    var _feature$properties;\n    const countryName = (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.name;\n    const isThyroid = thyroidCountries.has(countryName);\n    const isLung = lungCountries.has(countryName);\n    if (dataType === 'thyroid' && isThyroid) {\n      return {\n        color: '#005bff',\n        weight: 1,\n        fillColor: '#a3caff',\n        fillOpacity: 0.5\n      };\n    } else if (dataType === 'lung' && isLung) {\n      return {\n        color: '#008000',\n        weight: 1,\n        fillColor: '#90ee90',\n        fillOpacity: 0.5\n      };\n    } else {\n      return {\n        color: '#cccccc',\n        weight: 1,\n        fillColor: '#e0e0e0',\n        fillOpacity: 0.3\n      };\n    }\n  };\n  const onEachCountry = (feature, layer) => {\n    var _feature$properties2;\n    const countryName = (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.name;\n    const isThyroid = thyroidCountries.has(countryName);\n    const isLung = lungCountries.has(countryName);\n    layer.bindTooltip(countryName, {\n      permanent: false,\n      direction: 'auto'\n    });\n    layer.setStyle(getCountryStyle(feature));\n    layer.on({\n      click: () => {\n        if (isThyroid || isLung) {\n          setSelectedCountry(countryName);\n          setModalIsOpen(true);\n          setMapInteractive(false);\n        }\n      }\n    });\n  };\n  const MapDisabler = () => {\n    _s();\n    const map = useMap();\n    useEffect(() => {\n      if (!mapInteractive) {\n        map.options.dragging = false;\n        map.options.scrollWheelZoom = false;\n        map.options.doubleClickZoom = false;\n        map.options.touchZoom = false;\n        map._container.style.pointerEvents = \"none\";\n      } else {\n        map.options.dragging = true;\n        map.options.scrollWheelZoom = true;\n        map.options.doubleClickZoom = true;\n        map.options.touchZoom = true;\n        map._container.style.pointerEvents = \"auto\";\n      }\n    }, [mapInteractive, map]);\n    return null;\n  };\n\n  // Function to toggle side menu visibility\n  _s(MapDisabler, \"IoceErwr5KVGS9kN4RQ1bOkYMAg=\", false, function () {\n    return [useMap];\n  });\n  const toggleSideMenu = () => {\n    setSideMenuOpen(prevState => !prevState);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    className: \"world-map-container\",\n    children: [/*#__PURE__*/_jsxDEV(FilterPanel, {\n      selectedCountry: selectedCountry,\n      setSelectedCountry: setSelectedCountry,\n      dataType: dataType,\n      setDataType: setDataType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 124,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n      className: \"side-menu-toggle\",\n      onClick: toggleSideMenu,\n      children: sideMenuOpen ? 'Close Menu' : 'Open Menu'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 132,\n      columnNumber: 7\n    }, this), sideMenuOpen && /*#__PURE__*/_jsxDEV(\"div\", {\n      className: \"side-menu\",\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: \"Side Menu Content\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 139,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: \"Here you can show content like other country maps, filters, or any other information.\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 140,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 138,\n      columnNumber: 9\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      className: \"map-container\",\n      center: [20, 0],\n      zoom: 2,\n      scrollWheelZoom: false,\n      dragging: false,\n      doubleClickZoom: false,\n      touchZoom: false,\n      zoomControl: false,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://stamen-tiles.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://stamen.com/\\\">Stamen Design</a> \\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 154,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(MapDisabler, {}, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 158,\n        columnNumber: 9\n      }, this), geoJsonData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: geoJsonData,\n        style: getCountryStyle,\n        onEachFeature: onEachCountry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 160,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 144,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: modalIsOpen,\n      onRequestClose: () => {\n        setModalIsOpen(false);\n        setMapInteractive(true);\n      },\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: selectedCountry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 168,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Data for \", selectedCountry, \" related to \", dataType, \" cancer.\"]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 169,\n        columnNumber: 9\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => {\n          setModalIsOpen(false);\n          setMapInteractive(true);\n        },\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 170,\n        columnNumber: 9\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 164,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 123,\n    columnNumber: 5\n  }, this);\n};\n_s2(WorldMap, \"MHNIyFKH7oNbMUQsL6XjaKkdguA=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","useMap","Papa","Modal","FilterPanel","jsxDEV","_jsxDEV","setAppElement","WorldMap","_s2","_s","$RefreshSig$","geoJsonData","setGeoJsonData","thyroidCountries","setThyroidCountries","Set","lungCountries","setLungCountries","selectedCountry","setSelectedCountry","dataType","setDataType","modalIsOpen","setModalIsOpen","mapInteractive","setMapInteractive","sideMenuOpen","setSideMenuOpen","normalizeCountryName","name","countryMap","toLowerCase","trim","fetch","then","response","json","data","catch","err","console","error","text","csvText","parse","header","skipEmptyLines","complete","results","countries","map","row","Country","getCountryStyle","feature","_feature$properties","countryName","properties","isThyroid","has","isLung","color","weight","fillColor","fillOpacity","onEachCountry","layer","_feature$properties2","bindTooltip","permanent","direction","setStyle","on","click","MapDisabler","options","dragging","scrollWheelZoom","doubleClickZoom","touchZoom","_container","style","pointerEvents","toggleSideMenu","prevState","className","children","fileName","_jsxFileName","lineNumber","columnNumber","onClick","center","zoom","zoomControl","url","attribution","onEachFeature","isOpen","onRequestClose","_c","$RefreshReg$"],"sources":["C:/Users/oldma/OneDrive/Documents/DATA101---Data-Visualization-Dashboard-Project/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON, useMap } from 'react-leaflet';\r\nimport Papa from 'papaparse';\r\nimport Modal from 'react-modal';\r\nimport FilterPanel from './FilterPanel';\r\n\r\nModal.setAppElement('#root');\r\n\r\nconst WorldMap = () => {\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n  const [thyroidCountries, setThyroidCountries] = useState(new Set());\r\n  const [lungCountries, setLungCountries] = useState(new Set());\r\n  const [selectedCountry, setSelectedCountry] = useState(null);\r\n  const [dataType, setDataType] = useState('lung');\r\n  const [modalIsOpen, setModalIsOpen] = useState(false);\r\n  const [mapInteractive, setMapInteractive] = useState(true);\r\n  const [sideMenuOpen, setSideMenuOpen] = useState(false); // State for side menu visibility\r\n\r\n  const normalizeCountryName = (name) => {\r\n    const countryMap = {\r\n      'usa': 'United States of America',\r\n      'uk': 'United Kingdom',\r\n      'dr congo': 'Dem. Rep. Congo'\r\n    };\r\n    return countryMap[name.toLowerCase().trim()] || name.trim();\r\n  };\r\n\r\n  useEffect(() => {\r\n    fetch('/data/custom.geo.json')\r\n      .then(response => response.json())\r\n      .then(data => setGeoJsonData(data))\r\n      .catch(err => console.error('Error loading GeoJSON:', err));\r\n\r\n    fetch('/data/thyroid_cancer_risk_data.csv')\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => {\r\n            const countries = new Set(results.data.map(row => normalizeCountryName(row.Country)));\r\n            setThyroidCountries(countries);\r\n          },\r\n        });\r\n      })\r\n      .catch(err => console.error('Error loading Thyroid CSV:', err));\r\n\r\n    fetch('/data/lung_cancer_prediction_dataset.csv')\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => {\r\n            const countries = new Set(results.data.map(row => normalizeCountryName(row.Country)));\r\n            setLungCountries(countries);\r\n          },\r\n        });\r\n      })\r\n      .catch(err => console.error('Error loading Lung CSV:', err));\r\n  }, []);\r\n\r\n  const getCountryStyle = (feature) => {\r\n    const countryName = feature.properties?.name;\r\n    const isThyroid = thyroidCountries.has(countryName);\r\n    const isLung = lungCountries.has(countryName);\r\n\r\n    if (dataType === 'thyroid' && isThyroid) {\r\n      return { color: '#005bff', weight: 1, fillColor: '#a3caff', fillOpacity: 0.5 };\r\n    } else if (dataType === 'lung' && isLung) {\r\n      return { color: '#008000', weight: 1, fillColor: '#90ee90', fillOpacity: 0.5 };\r\n    } else {\r\n      return { color: '#cccccc', weight: 1, fillColor: '#e0e0e0', fillOpacity: 0.3 };\r\n    }\r\n  };\r\n\r\n  const onEachCountry = (feature, layer) => {\r\n    const countryName = feature.properties?.name;\r\n    const isThyroid = thyroidCountries.has(countryName);\r\n    const isLung = lungCountries.has(countryName);\r\n\r\n    layer.bindTooltip(countryName, { permanent: false, direction: 'auto' });\r\n\r\n    layer.setStyle(getCountryStyle(feature));\r\n\r\n    layer.on({\r\n      click: () => {\r\n        if (isThyroid || isLung) {\r\n          setSelectedCountry(countryName);\r\n          setModalIsOpen(true);\r\n          setMapInteractive(false);\r\n        }\r\n      }\r\n    });\r\n  };\r\n\r\n  const MapDisabler = () => {\r\n    const map = useMap();\r\n    useEffect(() => {\r\n      if (!mapInteractive) {\r\n        map.options.dragging = false;\r\n        map.options.scrollWheelZoom = false;\r\n        map.options.doubleClickZoom = false;\r\n        map.options.touchZoom = false;\r\n        map._container.style.pointerEvents = \"none\";\r\n      } else {\r\n        map.options.dragging = true;\r\n        map.options.scrollWheelZoom = true;\r\n        map.options.doubleClickZoom = true;\r\n        map.options.touchZoom = true;\r\n        map._container.style.pointerEvents = \"auto\";\r\n      }\r\n    }, [mapInteractive, map]);\r\n    return null;\r\n  };\r\n\r\n  // Function to toggle side menu visibility\r\n  const toggleSideMenu = () => {\r\n    setSideMenuOpen(prevState => !prevState);\r\n  };\r\n\r\n  return (\r\n    <div className=\"world-map-container\">\r\n      <FilterPanel \r\n        selectedCountry={selectedCountry} \r\n        setSelectedCountry={setSelectedCountry} \r\n        dataType={dataType} \r\n        setDataType={setDataType} \r\n      />\r\n\r\n      {/* Side Menu Toggle Button */}\r\n      <button className=\"side-menu-toggle\" onClick={toggleSideMenu}>\r\n        {sideMenuOpen ? 'Close Menu' : 'Open Menu'}\r\n      </button>\r\n\r\n      {/* Side Menu */}\r\n      {sideMenuOpen && (\r\n        <div className=\"side-menu\">\r\n          <h2>Side Menu Content</h2>\r\n          <p>Here you can show content like other country maps, filters, or any other information.</p>\r\n        </div>\r\n      )}\r\n\r\n      <MapContainer\r\n        className=\"map-container\"\r\n        center={[20, 0]}\r\n        zoom={2}\r\n        scrollWheelZoom={false}\r\n        dragging={false}\r\n        doubleClickZoom={false}\r\n        touchZoom={false}\r\n        zoomControl={false}\r\n      >\r\n        <TileLayer\r\n          url=\"https://stamen-tiles.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://stamen.com/\">Stamen Design</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\r\n        />\r\n        <MapDisabler />\r\n        {geoJsonData && (\r\n          <GeoJSON data={geoJsonData} style={getCountryStyle} onEachFeature={onEachCountry} />\r\n        )}\r\n      </MapContainer>\r\n\r\n      <Modal isOpen={modalIsOpen} onRequestClose={() => {\r\n        setModalIsOpen(false);\r\n        setMapInteractive(true);\r\n      }}>\r\n        <h2>{selectedCountry}</h2>\r\n        <p>Data for {selectedCountry} related to {dataType} cancer.</p>\r\n        <button onClick={() => {\r\n          setModalIsOpen(false);\r\n          setMapInteractive(true);\r\n        }}>Close</button>\r\n      </Modal>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}