{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oldma\\\\OneDrive\\\\Documents\\\\DATA101---Data-Visualization-Dashboard-Project\\\\src\\\\components\\\\WorldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON, useMap } from 'react-leaflet';\nimport Papa from 'papaparse';\nimport L from 'leaflet';\nimport Modal from 'react-modal';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = () => {\n  _s();\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [thyroidCountries, setThyroidCountries] = useState(new Set());\n  const [lungCountries, setLungCountries] = useState(new Set());\n  const [modalData, setModalData] = useState(null);\n  useEffect(() => {\n    fetch('/data/custom.geo.json').then(response => response.json()).then(setGeoJsonData).catch(err => console.error('Error loading GeoJSON:', err));\n    fetch('/data/thyroid_cancer_risk_data.csv').then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => {\n          setThyroidCountries(new Set(results.data.map(row => row.Country.trim())));\n        }\n      });\n    });\n    fetch('/data/lung_cancer_prediction_dataset.csv').then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => {\n          setLungCountries(new Set(results.data.map(row => row.Country.trim())));\n        }\n      });\n    });\n  }, []);\n  const getCountryStyle = feature => {\n    var _feature$properties;\n    const countryName = (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.name;\n    if (thyroidCountries.has(countryName)) {\n      return {\n        color: '#005bff',\n        fillColor: '#a3caff',\n        fillOpacity: 0.5,\n        weight: 1\n      };\n    }\n    if (lungCountries.has(countryName)) {\n      return {\n        color: '#008000',\n        fillColor: '#90ee90',\n        fillOpacity: 0.5,\n        weight: 1\n      };\n    }\n    return {\n      color: '#888888',\n      fillColor: '#d3d3d3',\n      fillOpacity: 0.3,\n      weight: 1\n    };\n  };\n  const onEachCountry = (feature, layer) => {\n    var _feature$properties2;\n    const countryName = (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.name;\n    const hasData = thyroidCountries.has(countryName) || lungCountries.has(countryName);\n    layer.bindTooltip(countryName, {\n      permanent: false,\n      direction: 'auto'\n    });\n    layer.setStyle(getCountryStyle(feature));\n    if (hasData) {\n      layer.on({\n        click: () => {\n          setModalData({\n            name: countryName,\n            type: thyroidCountries.has(countryName) ? 'Thyroid' : 'Lung'\n          });\n        }\n      });\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      className: \"map-container\",\n      center: [20, 0],\n      zoom: 2.5,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://stamen-tiles.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://stamen.com/\\\">Stamen Design</a>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 74,\n        columnNumber: 9\n      }, this), geoJsonData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: geoJsonData,\n        style: getCountryStyle,\n        onEachFeature: onEachCountry\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 79,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 73,\n      columnNumber: 7\n    }, this), modalData && /*#__PURE__*/_jsxDEV(Modal, {\n      isOpen: true,\n      onRequestClose: () => setModalData(null),\n      children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n        children: modalData.name\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 85,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"p\", {\n        children: [\"Cancer Type: \", modalData.type]\n      }, void 0, true, {\n        fileName: _jsxFileName,\n        lineNumber: 86,\n        columnNumber: 11\n      }, this), /*#__PURE__*/_jsxDEV(\"button\", {\n        onClick: () => setModalData(null),\n        children: \"Close\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 87,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 84,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 72,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"WJi7t4Fee1a8H+yRdV+ZVkEOOJY=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","useMap","Papa","L","Modal","jsxDEV","_jsxDEV","WorldMap","_s","geoJsonData","setGeoJsonData","thyroidCountries","setThyroidCountries","Set","lungCountries","setLungCountries","modalData","setModalData","fetch","then","response","json","catch","err","console","error","text","csvText","parse","header","skipEmptyLines","complete","results","data","map","row","Country","trim","getCountryStyle","feature","_feature$properties","countryName","properties","name","has","color","fillColor","fillOpacity","weight","onEachCountry","layer","_feature$properties2","hasData","bindTooltip","permanent","direction","setStyle","on","click","type","children","className","center","zoom","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","style","onEachFeature","isOpen","onRequestClose","onClick","_c","$RefreshReg$"],"sources":["C:/Users/oldma/OneDrive/Documents/DATA101---Data-Visualization-Dashboard-Project/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON, useMap } from 'react-leaflet';\r\nimport Papa from 'papaparse';\r\nimport L from 'leaflet';\r\nimport Modal from 'react-modal';\r\n\r\nconst WorldMap = () => {\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n  const [thyroidCountries, setThyroidCountries] = useState(new Set());\r\n  const [lungCountries, setLungCountries] = useState(new Set());\r\n  const [modalData, setModalData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('/data/custom.geo.json')\r\n      .then(response => response.json())\r\n      .then(setGeoJsonData)\r\n      .catch(err => console.error('Error loading GeoJSON:', err));\r\n\r\n    fetch('/data/thyroid_cancer_risk_data.csv')\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => {\r\n            setThyroidCountries(new Set(results.data.map(row => row.Country.trim())));\r\n          },\r\n        });\r\n      });\r\n\r\n    fetch('/data/lung_cancer_prediction_dataset.csv')\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => {\r\n            setLungCountries(new Set(results.data.map(row => row.Country.trim())));\r\n          },\r\n        });\r\n      });\r\n  }, []);\r\n\r\n  const getCountryStyle = (feature) => {\r\n    const countryName = feature.properties?.name;\r\n    if (thyroidCountries.has(countryName)) {\r\n      return { color: '#005bff', fillColor: '#a3caff', fillOpacity: 0.5, weight: 1 };\r\n    }\r\n    if (lungCountries.has(countryName)) {\r\n      return { color: '#008000', fillColor: '#90ee90', fillOpacity: 0.5, weight: 1 };\r\n    }\r\n    return { color: '#888888', fillColor: '#d3d3d3', fillOpacity: 0.3, weight: 1 };\r\n  };\r\n\r\n  const onEachCountry = (feature, layer) => {\r\n    const countryName = feature.properties?.name;\r\n    const hasData = thyroidCountries.has(countryName) || lungCountries.has(countryName);\r\n\r\n    layer.bindTooltip(countryName, { permanent: false, direction: 'auto' });\r\n    layer.setStyle(getCountryStyle(feature));\r\n\r\n    if (hasData) {\r\n      layer.on({\r\n        click: () => {\r\n          setModalData({ name: countryName, type: thyroidCountries.has(countryName) ? 'Thyroid' : 'Lung' });\r\n        }\r\n      });\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <MapContainer className=\"map-container\" center={[20, 0]} zoom={2.5}>\r\n        <TileLayer\r\n          url=\"https://stamen-tiles.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://stamen.com/\">Stamen Design</a>'\r\n        />\r\n        {geoJsonData && (\r\n          <GeoJSON data={geoJsonData} style={getCountryStyle} onEachFeature={onEachCountry} />\r\n        )}\r\n      </MapContainer>\r\n\r\n      {modalData && (\r\n        <Modal isOpen onRequestClose={() => setModalData(null)}>\r\n          <h2>{modalData.name}</h2>\r\n          <p>Cancer Type: {modalData.type}</p>\r\n          <button onClick={() => setModalData(null)}>Close</button>\r\n        </Modal>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,SAASC,YAAY,EAAEC,SAAS,EAAEC,OAAO,EAAEC,MAAM,QAAQ,eAAe;AACxE,OAAOC,IAAI,MAAM,WAAW;AAC5B,OAAOC,CAAC,MAAM,SAAS;AACvB,OAAOC,KAAK,MAAM,aAAa;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEhC,MAAMC,QAAQ,GAAGA,CAAA,KAAM;EAAAC,EAAA;EACrB,MAAM,CAACC,WAAW,EAAEC,cAAc,CAAC,GAAGb,QAAQ,CAAC,IAAI,CAAC;EACpD,MAAM,CAACc,gBAAgB,EAAEC,mBAAmB,CAAC,GAAGf,QAAQ,CAAC,IAAIgB,GAAG,CAAC,CAAC,CAAC;EACnE,MAAM,CAACC,aAAa,EAAEC,gBAAgB,CAAC,GAAGlB,QAAQ,CAAC,IAAIgB,GAAG,CAAC,CAAC,CAAC;EAC7D,MAAM,CAACG,SAAS,EAAEC,YAAY,CAAC,GAAGpB,QAAQ,CAAC,IAAI,CAAC;EAEhDD,SAAS,CAAC,MAAM;IACdsB,KAAK,CAAC,uBAAuB,CAAC,CAC3BC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACjCF,IAAI,CAACT,cAAc,CAAC,CACpBY,KAAK,CAACC,GAAG,IAAIC,OAAO,CAACC,KAAK,CAAC,wBAAwB,EAAEF,GAAG,CAAC,CAAC;IAE7DL,KAAK,CAAC,oCAAoC,CAAC,CACxCC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CACjCP,IAAI,CAACQ,OAAO,IAAI;MACfzB,IAAI,CAAC0B,KAAK,CAACD,OAAO,EAAE;QAClBE,MAAM,EAAE,IAAI;QACZC,cAAc,EAAE,IAAI;QACpBC,QAAQ,EAAGC,OAAO,IAAK;UACrBpB,mBAAmB,CAAC,IAAIC,GAAG,CAACmB,OAAO,CAACC,IAAI,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QAC3E;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;IAEJnB,KAAK,CAAC,0CAA0C,CAAC,CAC9CC,IAAI,CAACC,QAAQ,IAAIA,QAAQ,CAACM,IAAI,CAAC,CAAC,CAAC,CACjCP,IAAI,CAACQ,OAAO,IAAI;MACfzB,IAAI,CAAC0B,KAAK,CAACD,OAAO,EAAE;QAClBE,MAAM,EAAE,IAAI;QACZC,cAAc,EAAE,IAAI;QACpBC,QAAQ,EAAGC,OAAO,IAAK;UACrBjB,gBAAgB,CAAC,IAAIF,GAAG,CAACmB,OAAO,CAACC,IAAI,CAACC,GAAG,CAACC,GAAG,IAAIA,GAAG,CAACC,OAAO,CAACC,IAAI,CAAC,CAAC,CAAC,CAAC,CAAC;QACxE;MACF,CAAC,CAAC;IACJ,CAAC,CAAC;EACN,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,eAAe,GAAIC,OAAO,IAAK;IAAA,IAAAC,mBAAA;IACnC,MAAMC,WAAW,IAAAD,mBAAA,GAAGD,OAAO,CAACG,UAAU,cAAAF,mBAAA,uBAAlBA,mBAAA,CAAoBG,IAAI;IAC5C,IAAIhC,gBAAgB,CAACiC,GAAG,CAACH,WAAW,CAAC,EAAE;MACrC,OAAO;QAAEI,KAAK,EAAE,SAAS;QAAEC,SAAS,EAAE,SAAS;QAAEC,WAAW,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAE,CAAC;IAChF;IACA,IAAIlC,aAAa,CAAC8B,GAAG,CAACH,WAAW,CAAC,EAAE;MAClC,OAAO;QAAEI,KAAK,EAAE,SAAS;QAAEC,SAAS,EAAE,SAAS;QAAEC,WAAW,EAAE,GAAG;QAAEC,MAAM,EAAE;MAAE,CAAC;IAChF;IACA,OAAO;MAAEH,KAAK,EAAE,SAAS;MAAEC,SAAS,EAAE,SAAS;MAAEC,WAAW,EAAE,GAAG;MAAEC,MAAM,EAAE;IAAE,CAAC;EAChF,CAAC;EAED,MAAMC,aAAa,GAAGA,CAACV,OAAO,EAAEW,KAAK,KAAK;IAAA,IAAAC,oBAAA;IACxC,MAAMV,WAAW,IAAAU,oBAAA,GAAGZ,OAAO,CAACG,UAAU,cAAAS,oBAAA,uBAAlBA,oBAAA,CAAoBR,IAAI;IAC5C,MAAMS,OAAO,GAAGzC,gBAAgB,CAACiC,GAAG,CAACH,WAAW,CAAC,IAAI3B,aAAa,CAAC8B,GAAG,CAACH,WAAW,CAAC;IAEnFS,KAAK,CAACG,WAAW,CAACZ,WAAW,EAAE;MAAEa,SAAS,EAAE,KAAK;MAAEC,SAAS,EAAE;IAAO,CAAC,CAAC;IACvEL,KAAK,CAACM,QAAQ,CAAClB,eAAe,CAACC,OAAO,CAAC,CAAC;IAExC,IAAIa,OAAO,EAAE;MACXF,KAAK,CAACO,EAAE,CAAC;QACPC,KAAK,EAAEA,CAAA,KAAM;UACXzC,YAAY,CAAC;YAAE0B,IAAI,EAAEF,WAAW;YAAEkB,IAAI,EAAEhD,gBAAgB,CAACiC,GAAG,CAACH,WAAW,CAAC,GAAG,SAAS,GAAG;UAAO,CAAC,CAAC;QACnG;MACF,CAAC,CAAC;IACJ;EACF,CAAC;EAED,oBACEnC,OAAA;IAAAsD,QAAA,gBACEtD,OAAA,CAACR,YAAY;MAAC+D,SAAS,EAAC,eAAe;MAACC,MAAM,EAAE,CAAC,EAAE,EAAE,CAAC,CAAE;MAACC,IAAI,EAAE,GAAI;MAAAH,QAAA,gBACjEtD,OAAA,CAACP,SAAS;QACRiE,GAAG,EAAC,6DAA6D;QACjEC,WAAW,EAAC;MAAwD;QAAAC,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OACrE,CAAC,EACD5D,WAAW,iBACVH,OAAA,CAACN,OAAO;QAACiC,IAAI,EAAExB,WAAY;QAAC6D,KAAK,EAAEhC,eAAgB;QAACiC,aAAa,EAAEtB;MAAc;QAAAiB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAE,CACpF;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACW,CAAC,EAEdrD,SAAS,iBACRV,OAAA,CAACF,KAAK;MAACoE,MAAM;MAACC,cAAc,EAAEA,CAAA,KAAMxD,YAAY,CAAC,IAAI,CAAE;MAAA2C,QAAA,gBACrDtD,OAAA;QAAAsD,QAAA,EAAK5C,SAAS,CAAC2B;MAAI;QAAAuB,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAK,CAAC,eACzB/D,OAAA;QAAAsD,QAAA,GAAG,eAAa,EAAC5C,SAAS,CAAC2C,IAAI;MAAA;QAAAO,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAI,CAAC,eACpC/D,OAAA;QAAQoE,OAAO,EAAEA,CAAA,KAAMzD,YAAY,CAAC,IAAI,CAAE;QAAA2C,QAAA,EAAC;MAAK;QAAAM,QAAA,EAAAC,YAAA;QAAAC,UAAA;QAAAC,YAAA;MAAA,OAAQ,CAAC;IAAA;MAAAH,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACpD,CACR;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAC7D,EAAA,CArFID,QAAQ;AAAAoE,EAAA,GAARpE,QAAQ;AAuFd,eAAeA,QAAQ;AAAC,IAAAoE,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}