{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oldma\\\\OneDrive\\\\Documents\\\\DATA101---Data-Visualization-Dashboard-Project\\\\src\\\\components\\\\WorldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = ({\n  dataType,\n  onCountrySelect\n}) => {\n  _s();\n  const [geoData, setGeoData] = useState(null);\n  useEffect(() => {\n    fetch('/data/custom.geo.json').then(response => response.json()).then(data => setGeoData(data));\n  }, []);\n  const handleClick = event => {\n    var _event$points$;\n    const country = (_event$points$ = event.points[0]) === null || _event$points$ === void 0 ? void 0 : _event$points$.location;\n    onCountrySelect(country);\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: dataType === 'lung' ? 'Lung Cancer Data' : 'Thyroid Cancer Data'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 20,\n      columnNumber: 7\n    }, this), geoData ? /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        type: 'choropleth',\n        locationmode: 'country names',\n        geojson: geoData,\n        locations: geoData.features.map(f => f.properties.name),\n        z: geoData.features.map(f => f.properties[dataType] || 0),\n        colorscale: 'Reds',\n        colorbar: {\n          title: dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate'\n        }\n      }],\n      layout: {\n        geo: {\n          projection: {\n            type: 'natural earth'\n          }\n        },\n        title: `Global ${dataType === 'lung' ? 'Lung Cancer' : 'Thyroid Cancer'} Data`\n      },\n      onClick: handleClick\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 22,\n      columnNumber: 9\n    }, this) : /*#__PURE__*/_jsxDEV(\"p\", {\n      children: \"Loading map data...\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 43,\n      columnNumber: 9\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 19,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"XFwNiZU7V1vH1/ltkkdan/GVUMo=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useState","Plot","jsxDEV","_jsxDEV","WorldMap","dataType","onCountrySelect","_s","geoData","setGeoData","fetch","then","response","json","data","handleClick","event","_event$points$","country","points","location","children","fileName","_jsxFileName","lineNumber","columnNumber","type","locationmode","geojson","locations","features","map","f","properties","name","z","colorscale","colorbar","title","layout","geo","projection","onClick","_c","$RefreshReg$"],"sources":["C:/Users/oldma/OneDrive/Documents/DATA101---Data-Visualization-Dashboard-Project/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\nconst WorldMap = ({ dataType, onCountrySelect }) => {\r\n  const [geoData, setGeoData] = useState(null);\r\n\r\n  useEffect(() => {\r\n    fetch('/data/custom.geo.json')\r\n      .then((response) => response.json())\r\n      .then((data) => setGeoData(data));\r\n  }, []);\r\n\r\n  const handleClick = (event) => {\r\n    const country = event.points[0]?.location;\r\n    onCountrySelect(country);\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <h2>{dataType === 'lung' ? 'Lung Cancer Data' : 'Thyroid Cancer Data'}</h2>\r\n      {geoData ? (\r\n        <Plot\r\n          data={[\r\n            {\r\n              type: 'choropleth',\r\n              locationmode: 'country names',\r\n              geojson: geoData,\r\n              locations: geoData.features.map((f) => f.properties.name),\r\n              z: geoData.features.map((f) => f.properties[dataType] || 0),\r\n              colorscale: 'Reds',\r\n              colorbar: { title: dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate' }\r\n            }\r\n          ]}\r\n          layout={{\r\n            geo: {\r\n              projection: { type: 'natural earth' }\r\n            },\r\n            title: `Global ${dataType === 'lung' ? 'Lung Cancer' : 'Thyroid Cancer'} Data`\r\n          }}\r\n          onClick={handleClick}\r\n        />\r\n      ) : (\r\n        <p>Loading map data...</p>\r\n      )}\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC;AAAgB,CAAC,KAAK;EAAAC,EAAA;EAClD,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,IAAI,CAAC;EAE5CD,SAAS,CAAC,MAAM;IACdW,KAAK,CAAC,uBAAuB,CAAC,CAC3BC,IAAI,CAAEC,QAAQ,IAAKA,QAAQ,CAACC,IAAI,CAAC,CAAC,CAAC,CACnCF,IAAI,CAAEG,IAAI,IAAKL,UAAU,CAACK,IAAI,CAAC,CAAC;EACrC,CAAC,EAAE,EAAE,CAAC;EAEN,MAAMC,WAAW,GAAIC,KAAK,IAAK;IAAA,IAAAC,cAAA;IAC7B,MAAMC,OAAO,IAAAD,cAAA,GAAGD,KAAK,CAACG,MAAM,CAAC,CAAC,CAAC,cAAAF,cAAA,uBAAfA,cAAA,CAAiBG,QAAQ;IACzCd,eAAe,CAACY,OAAO,CAAC;EAC1B,CAAC;EAED,oBACEf,OAAA;IAAAkB,QAAA,gBACElB,OAAA;MAAAkB,QAAA,EAAKhB,QAAQ,KAAK,MAAM,GAAG,kBAAkB,GAAG;IAAqB;MAAAiB,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,EAC1EjB,OAAO,gBACNL,OAAA,CAACF,IAAI;MACHa,IAAI,EAAE,CACJ;QACEY,IAAI,EAAE,YAAY;QAClBC,YAAY,EAAE,eAAe;QAC7BC,OAAO,EAAEpB,OAAO;QAChBqB,SAAS,EAAErB,OAAO,CAACsB,QAAQ,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,UAAU,CAACC,IAAI,CAAC;QACzDC,CAAC,EAAE3B,OAAO,CAACsB,QAAQ,CAACC,GAAG,CAAEC,CAAC,IAAKA,CAAC,CAACC,UAAU,CAAC5B,QAAQ,CAAC,IAAI,CAAC,CAAC;QAC3D+B,UAAU,EAAE,MAAM;QAClBC,QAAQ,EAAE;UAAEC,KAAK,EAAEjC,QAAQ,KAAK,MAAM,GAAG,kBAAkB,GAAG;QAAsB;MACtF,CAAC,CACD;MACFkC,MAAM,EAAE;QACNC,GAAG,EAAE;UACHC,UAAU,EAAE;YAAEf,IAAI,EAAE;UAAgB;QACtC,CAAC;QACDY,KAAK,EAAE,UAAUjC,QAAQ,KAAK,MAAM,GAAG,aAAa,GAAG,gBAAgB;MACzE,CAAE;MACFqC,OAAO,EAAE3B;IAAY;MAAAO,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACtB,CAAC,gBAEFtB,OAAA;MAAAkB,QAAA,EAAG;IAAmB;MAAAC,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAG,CAC1B;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACE,CAAC;AAEV,CAAC;AAAClB,EAAA,CA3CIH,QAAQ;AAAAuC,EAAA,GAARvC,QAAQ;AA6Cd,eAAeA,QAAQ;AAAC,IAAAuC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}