{"ast":null,"code":"import React,{useEffect,useState}from'react';import Plot from'react-plotly.js';import Papa from'papaparse';import{jsx as _jsx}from\"react/jsx-runtime\";const WorldMap=_ref=>{let{dataType}=_ref;const[geoData,setGeoData]=useState([]);useEffect(()=>{const fileName=dataType==='lung'?'/data/lung_cancer_prediction_dataset.csv':'/data/thyroid_cancer_risk_data.csv';Papa.parse(fileName,{download:true,header:true,complete:result=>setGeoData(result.data),error:error=>console.error('Error loading CSV:',error)});},[dataType]);const filteredData=geoData.map(item=>({country:item.country||item.Country,value:parseFloat(item[dataType==='lung'?'Lung Cancer Rate':'Thyroid Cancer Rate'])||0}));return/*#__PURE__*/_jsx(\"div\",{style:{width:'100vw',height:'100vh'},children:/*#__PURE__*/_jsx(Plot,{data:[{type:'choropleth',locationmode:'country names',locations:filteredData.map(item=>item.country),z:filteredData.map(item=>item.value),colorscale:'Reds',colorbar:{title:dataType==='lung'?'Lung Cancer Rate':'Thyroid Cancer Rate'}}],layout:{geo:{projection:{type:'natural earth'},showland:true,landcolor:'#E5E5E5',countrycolor:'#B3B3B3',showlakes:true,lakecolor:'#FFFFFF',scrollZoom:true},autosize:true,margin:{t:0,b:0,l:0,r:0}},style:{width:'100%',height:'100%'}})});};export default WorldMap;","map":{"version":3,"names":["React","useEffect","useState","Plot","Papa","jsx","_jsx","WorldMap","_ref","dataType","geoData","setGeoData","fileName","parse","download","header","complete","result","data","error","console","filteredData","map","item","country","Country","value","parseFloat","style","width","height","children","type","locationmode","locations","z","colorscale","colorbar","title","layout","geo","projection","showland","landcolor","countrycolor","showlakes","lakecolor","scrollZoom","autosize","margin","t","b","l","r"],"sources":["C:/Users/oldma/OneDrive/Documents/DATA101---Data-Visualization-Dashboard-Project/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport Papa from 'papaparse';\r\n\r\nconst WorldMap = ({ dataType }) => {\r\n  const [geoData, setGeoData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fileName = dataType === 'lung' \r\n      ? '/data/lung_cancer_prediction_dataset.csv'\r\n      : '/data/thyroid_cancer_risk_data.csv';\r\n\r\n    Papa.parse(fileName, {\r\n      download: true,\r\n      header: true,\r\n      complete: (result) => setGeoData(result.data),\r\n      error: (error) => console.error('Error loading CSV:', error),\r\n    });\r\n  }, [dataType]);\r\n\r\n  const filteredData = geoData.map((item) => ({\r\n    country: item.country || item.Country,\r\n    value: parseFloat(item[dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate']) || 0,\r\n  }));\r\n\r\n  return (\r\n    <div style={{ width: '100vw', height: '100vh' }}>\r\n      <Plot\r\n        data={[\r\n          {\r\n            type: 'choropleth',\r\n            locationmode: 'country names',\r\n            locations: filteredData.map((item) => item.country),\r\n            z: filteredData.map((item) => item.value),\r\n            colorscale: 'Reds',\r\n            colorbar: { title: dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate' }\r\n          }\r\n        ]}\r\n        layout={{\r\n          geo: {\r\n            projection: { type: 'natural earth' },\r\n            showland: true,\r\n            landcolor: '#E5E5E5',\r\n            countrycolor: '#B3B3B3',\r\n            showlakes: true,\r\n            lakecolor: '#FFFFFF',\r\n            scrollZoom: true,\r\n          },\r\n          autosize: true,\r\n          margin: { t: 0, b: 0, l: 0, r: 0 },\r\n        }}\r\n        style={{ width: '100%', height: '100%' }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n"],"mappings":"AAAA,MAAO,CAAAA,KAAK,EAAIC,SAAS,CAAEC,QAAQ,KAAQ,OAAO,CAClD,MAAO,CAAAC,IAAI,KAAM,iBAAiB,CAClC,MAAO,CAAAC,IAAI,KAAM,WAAW,CAAC,OAAAC,GAAA,IAAAC,IAAA,yBAE7B,KAAM,CAAAC,QAAQ,CAAGC,IAAA,EAAkB,IAAjB,CAAEC,QAAS,CAAC,CAAAD,IAAA,CAC5B,KAAM,CAACE,OAAO,CAAEC,UAAU,CAAC,CAAGT,QAAQ,CAAC,EAAE,CAAC,CAE1CD,SAAS,CAAC,IAAM,CACd,KAAM,CAAAW,QAAQ,CAAGH,QAAQ,GAAK,MAAM,CAChC,0CAA0C,CAC1C,oCAAoC,CAExCL,IAAI,CAACS,KAAK,CAACD,QAAQ,CAAE,CACnBE,QAAQ,CAAE,IAAI,CACdC,MAAM,CAAE,IAAI,CACZC,QAAQ,CAAGC,MAAM,EAAKN,UAAU,CAACM,MAAM,CAACC,IAAI,CAAC,CAC7CC,KAAK,CAAGA,KAAK,EAAKC,OAAO,CAACD,KAAK,CAAC,oBAAoB,CAAEA,KAAK,CAC7D,CAAC,CAAC,CACJ,CAAC,CAAE,CAACV,QAAQ,CAAC,CAAC,CAEd,KAAM,CAAAY,YAAY,CAAGX,OAAO,CAACY,GAAG,CAAEC,IAAI,GAAM,CAC1CC,OAAO,CAAED,IAAI,CAACC,OAAO,EAAID,IAAI,CAACE,OAAO,CACrCC,KAAK,CAAEC,UAAU,CAACJ,IAAI,CAACd,QAAQ,GAAK,MAAM,CAAG,kBAAkB,CAAG,qBAAqB,CAAC,CAAC,EAAI,CAC/F,CAAC,CAAC,CAAC,CAEH,mBACEH,IAAA,QAAKsB,KAAK,CAAE,CAAEC,KAAK,CAAE,OAAO,CAAEC,MAAM,CAAE,OAAQ,CAAE,CAAAC,QAAA,cAC9CzB,IAAA,CAACH,IAAI,EACHe,IAAI,CAAE,CACJ,CACEc,IAAI,CAAE,YAAY,CAClBC,YAAY,CAAE,eAAe,CAC7BC,SAAS,CAAEb,YAAY,CAACC,GAAG,CAAEC,IAAI,EAAKA,IAAI,CAACC,OAAO,CAAC,CACnDW,CAAC,CAAEd,YAAY,CAACC,GAAG,CAAEC,IAAI,EAAKA,IAAI,CAACG,KAAK,CAAC,CACzCU,UAAU,CAAE,MAAM,CAClBC,QAAQ,CAAE,CAAEC,KAAK,CAAE7B,QAAQ,GAAK,MAAM,CAAG,kBAAkB,CAAG,qBAAsB,CACtF,CAAC,CACD,CACF8B,MAAM,CAAE,CACNC,GAAG,CAAE,CACHC,UAAU,CAAE,CAAET,IAAI,CAAE,eAAgB,CAAC,CACrCU,QAAQ,CAAE,IAAI,CACdC,SAAS,CAAE,SAAS,CACpBC,YAAY,CAAE,SAAS,CACvBC,SAAS,CAAE,IAAI,CACfC,SAAS,CAAE,SAAS,CACpBC,UAAU,CAAE,IACd,CAAC,CACDC,QAAQ,CAAE,IAAI,CACdC,MAAM,CAAE,CAAEC,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAC,CAAEC,CAAC,CAAE,CAAE,CACnC,CAAE,CACFzB,KAAK,CAAE,CAAEC,KAAK,CAAE,MAAM,CAAEC,MAAM,CAAE,MAAO,CAAE,CAC1C,CAAC,CACC,CAAC,CAEV,CAAC,CAED,cAAe,CAAAvB,QAAQ","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}