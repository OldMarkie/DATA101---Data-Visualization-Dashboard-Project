{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oldma\\\\OneDrive\\\\Documents\\\\DATA101---Data-Visualization-Dashboard-Project\\\\src\\\\components\\\\WorldMap.js\";\nimport React from 'react';\nimport Plot from 'react-plotly.js';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = ({\n  dataType,\n  onCountrySelect,\n  cancerData\n}) => {\n  const filteredData = cancerData.map(item => ({\n    country: item.country || item.Country,\n    value: parseFloat(item[dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate'])\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(\"h2\", {\n      children: dataType === 'lung' ? 'Lung Cancer Data' : 'Thyroid Cancer Data'\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 12,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        type: 'choropleth',\n        locationmode: 'country names',\n        locations: filteredData.map(item => item.country),\n        z: filteredData.map(item => item.value),\n        colorscale: 'Reds',\n        colorbar: {\n          title: dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate'\n        }\n      }],\n      layout: {\n        geo: {\n          projection: {\n            type: 'natural earth'\n          }\n        },\n        title: `Global ${dataType === 'lung' ? 'Lung Cancer' : 'Thyroid Cancer'} Data`\n      },\n      onClick: event => {\n        var _event$points, _event$points$;\n        const country = event === null || event === void 0 ? void 0 : (_event$points = event.points) === null || _event$points === void 0 ? void 0 : (_event$points$ = _event$points[0]) === null || _event$points$ === void 0 ? void 0 : _event$points$.location;\n        if (country) {\n          onCountrySelect(country);\n        }\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 13,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 11,\n    columnNumber: 5\n  }, this);\n};\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","Plot","jsxDEV","_jsxDEV","WorldMap","dataType","onCountrySelect","cancerData","filteredData","map","item","country","Country","value","parseFloat","children","fileName","_jsxFileName","lineNumber","columnNumber","data","type","locationmode","locations","z","colorscale","colorbar","title","layout","geo","projection","onClick","event","_event$points","_event$points$","points","location","_c","$RefreshReg$"],"sources":["C:/Users/oldma/OneDrive/Documents/DATA101---Data-Visualization-Dashboard-Project/src/components/WorldMap.js"],"sourcesContent":["import React from 'react';\r\nimport Plot from 'react-plotly.js';\r\n\r\nconst WorldMap = ({ dataType, onCountrySelect, cancerData }) => {\r\n  const filteredData = cancerData.map((item) => ({\r\n    country: item.country || item.Country,\r\n    value: parseFloat(item[dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate']),\r\n  }));\r\n\r\n  return (\r\n    <div>\r\n      <h2>{dataType === 'lung' ? 'Lung Cancer Data' : 'Thyroid Cancer Data'}</h2>\r\n      <Plot\r\n        data={[\r\n          {\r\n            type: 'choropleth',\r\n            locationmode: 'country names',\r\n            locations: filteredData.map((item) => item.country),\r\n            z: filteredData.map((item) => item.value),\r\n            colorscale: 'Reds',\r\n            colorbar: { title: dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate' }\r\n          }\r\n        ]}\r\n        layout={{\r\n          geo: {\r\n            projection: { type: 'natural earth' }\r\n          },\r\n          title: `Global ${dataType === 'lung' ? 'Lung Cancer' : 'Thyroid Cancer'} Data`\r\n        }}\r\n        onClick={(event) => {\r\n          const country = event?.points?.[0]?.location;\r\n          if (country) {\r\n            onCountrySelect(country);\r\n          }\r\n        }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n"],"mappings":";AAAA,OAAOA,KAAK,MAAM,OAAO;AACzB,OAAOC,IAAI,MAAM,iBAAiB;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAEnC,MAAMC,QAAQ,GAAGA,CAAC;EAAEC,QAAQ;EAAEC,eAAe;EAAEC;AAAW,CAAC,KAAK;EAC9D,MAAMC,YAAY,GAAGD,UAAU,CAACE,GAAG,CAAEC,IAAI,KAAM;IAC7CC,OAAO,EAAED,IAAI,CAACC,OAAO,IAAID,IAAI,CAACE,OAAO;IACrCC,KAAK,EAAEC,UAAU,CAACJ,IAAI,CAACL,QAAQ,KAAK,MAAM,GAAG,kBAAkB,GAAG,qBAAqB,CAAC;EAC1F,CAAC,CAAC,CAAC;EAEH,oBACEF,OAAA;IAAAY,QAAA,gBACEZ,OAAA;MAAAY,QAAA,EAAKV,QAAQ,KAAK,MAAM,GAAG,kBAAkB,GAAG;IAAqB;MAAAW,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAAK,CAAC,eAC3EhB,OAAA,CAACF,IAAI;MACHmB,IAAI,EAAE,CACJ;QACEC,IAAI,EAAE,YAAY;QAClBC,YAAY,EAAE,eAAe;QAC7BC,SAAS,EAAEf,YAAY,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC;QACnDa,CAAC,EAAEhB,YAAY,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACG,KAAK,CAAC;QACzCY,UAAU,EAAE,MAAM;QAClBC,QAAQ,EAAE;UAAEC,KAAK,EAAEtB,QAAQ,KAAK,MAAM,GAAG,kBAAkB,GAAG;QAAsB;MACtF,CAAC,CACD;MACFuB,MAAM,EAAE;QACNC,GAAG,EAAE;UACHC,UAAU,EAAE;YAAET,IAAI,EAAE;UAAgB;QACtC,CAAC;QACDM,KAAK,EAAE,UAAUtB,QAAQ,KAAK,MAAM,GAAG,aAAa,GAAG,gBAAgB;MACzE,CAAE;MACF0B,OAAO,EAAGC,KAAK,IAAK;QAAA,IAAAC,aAAA,EAAAC,cAAA;QAClB,MAAMvB,OAAO,GAAGqB,KAAK,aAALA,KAAK,wBAAAC,aAAA,GAALD,KAAK,CAAEG,MAAM,cAAAF,aAAA,wBAAAC,cAAA,GAAbD,aAAA,CAAgB,CAAC,CAAC,cAAAC,cAAA,uBAAlBA,cAAA,CAAoBE,QAAQ;QAC5C,IAAIzB,OAAO,EAAE;UACXL,eAAe,CAACK,OAAO,CAAC;QAC1B;MACF;IAAE;MAAAK,QAAA,EAAAC,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OACH,CAAC;EAAA;IAAAH,QAAA,EAAAC,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAACkB,EAAA,GAnCIjC,QAAQ;AAqCd,eAAeA,QAAQ;AAAC,IAAAiC,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}