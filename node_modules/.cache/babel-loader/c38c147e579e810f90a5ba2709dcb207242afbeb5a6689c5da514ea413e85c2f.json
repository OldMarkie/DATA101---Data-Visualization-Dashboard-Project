{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oldma\\\\OneDrive\\\\Documents\\\\DATA101---Data-Visualization-Dashboard-Project\\\\src\\\\components\\\\WorldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = () => {\n  _s();\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [thyroidData, setThyroidData] = useState([]);\n  const [lungData, setLungData] = useState([]);\n  useEffect(() => {\n    // Load GeoJSON\n    fetch('/data/custom.geo.json').then(response => response.json()).then(data => setGeoJsonData(data)).catch(err => console.error('Error loading GeoJSON:', err));\n\n    // Load Thyroid Cancer Data\n    fetch('/data/thyroid_cancer_risk_data.csv').then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => setThyroidData(results.data)\n      });\n    }).catch(err => console.error('Error loading Thyroid CSV:', err));\n\n    // Load Lung Cancer Data\n    fetch('/data/lung_cancer_prediction_dataset.csv').then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => setLungData(results.data)\n      });\n    }).catch(err => console.error('Error loading Lung CSV:', err));\n  }, []);\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(MapContainer, {\n      className: \"map-container\",\n      center: [20, 0],\n      zoom: 2.5,\n      zoomControl: false,\n      dragging: false,\n      doubleClickZoom: false,\n      scrollWheelZoom: false,\n      touchZoom: false,\n      keyboard: false,\n      attributionControl: false,\n      worldCopyJump: false,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://stamen-tiles.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://stamen.com/\\\">Stamen Design</a> \\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 57,\n        columnNumber: 9\n      }, this), geoJsonData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: geoJsonData,\n        style: {\n          color: \"#005bff\",\n          weight: 1,\n          fillColor: \"#a3caff\",\n          fillOpacity: 0.5\n        }\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 63,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 44,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Thyroid Cancer Data (First 5 Rows)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 75,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(thyroidData.slice(0, 5), null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 76,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"h3\", {\n      children: \"Lung Cancer Data (First 5 Rows)\"\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 78,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(\"pre\", {\n      children: JSON.stringify(lungData.slice(0, 5), null, 2)\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 79,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 43,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"SeKqfm7fuozZPt66BffdgsF6PgM=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","Papa","jsxDEV","_jsxDEV","WorldMap","_s","geoJsonData","setGeoJsonData","thyroidData","setThyroidData","lungData","setLungData","fetch","then","response","json","data","catch","err","console","error","text","csvText","parse","header","skipEmptyLines","complete","results","children","className","center","zoom","zoomControl","dragging","doubleClickZoom","scrollWheelZoom","touchZoom","keyboard","attributionControl","worldCopyJump","url","attribution","fileName","_jsxFileName","lineNumber","columnNumber","style","color","weight","fillColor","fillOpacity","JSON","stringify","slice","_c","$RefreshReg$"],"sources":["C:/Users/oldma/OneDrive/Documents/DATA101---Data-Visualization-Dashboard-Project/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\r\nimport Papa from 'papaparse';\r\n\r\nconst WorldMap = () => {\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n  const [thyroidData, setThyroidData] = useState([]);\r\n  const [lungData, setLungData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    // Load GeoJSON\r\n    fetch('/data/custom.geo.json')\r\n      .then(response => response.json())\r\n      .then(data => setGeoJsonData(data))\r\n      .catch(err => console.error('Error loading GeoJSON:', err));\r\n\r\n    // Load Thyroid Cancer Data\r\n    fetch('/data/thyroid_cancer_risk_data.csv')\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => setThyroidData(results.data),\r\n        });\r\n      })\r\n      .catch(err => console.error('Error loading Thyroid CSV:', err));\r\n\r\n    // Load Lung Cancer Data\r\n    fetch('/data/lung_cancer_prediction_dataset.csv')\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => setLungData(results.data),\r\n        });\r\n      })\r\n      .catch(err => console.error('Error loading Lung CSV:', err));\r\n  }, []);\r\n\r\n  return (\r\n    <div>\r\n      <MapContainer\r\n        className=\"map-container\"\r\n        center={[20, 0]}\r\n        zoom={2.5}\r\n        zoomControl={false}\r\n        dragging={false}\r\n        doubleClickZoom={false}\r\n        scrollWheelZoom={false}\r\n        touchZoom={false}\r\n        keyboard={false}\r\n        attributionControl={false}\r\n        worldCopyJump={false}\r\n      >\r\n        <TileLayer\r\n          url=\"https://stamen-tiles.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://stamen.com/\">Stamen Design</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\r\n        />\r\n\r\n        {geoJsonData && (\r\n          <GeoJSON\r\n            data={geoJsonData}\r\n            style={{\r\n              color: \"#005bff\",\r\n              weight: 1,\r\n              fillColor: \"#a3caff\",\r\n              fillOpacity: 0.5\r\n            }}\r\n          />\r\n        )}\r\n      </MapContainer>\r\n\r\n      <h3>Thyroid Cancer Data (First 5 Rows)</h3>\r\n      <pre>{JSON.stringify(thyroidData.slice(0, 5), null, 2)}</pre>\r\n\r\n      <h3>Lung Cancer Data (First 5 Rows)</h3>\r\n      <pre>{JSON.stringify(lungData.slice(0, 5), null, 2)}</pre>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}