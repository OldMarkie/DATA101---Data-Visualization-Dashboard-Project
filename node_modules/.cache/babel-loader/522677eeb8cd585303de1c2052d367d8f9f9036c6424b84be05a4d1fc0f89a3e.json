{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oldma\\\\OneDrive\\\\Documents\\\\DATA101---Data-Visualization-Dashboard-Project\\\\src\\\\components\\\\WorldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\nimport Papa from 'papaparse';\nimport FilterPanel from './FilterPanel';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = () => {\n  _s();\n  const [geoJsonData, setGeoJsonData] = useState(null);\n  const [thyroidCountries, setThyroidCountries] = useState(new Set());\n  const [lungCountries, setLungCountries] = useState(new Set());\n  const [selectedCountry, setSelectedCountry] = useState('');\n  const [dataType, setDataType] = useState('lung');\n  const normalizeCountryName = name => {\n    const countryMap = {\n      'usa': 'United States of America',\n      'uk': 'United Kingdom',\n      'dr congo': 'Dem. Rep. Congo'\n    };\n    return countryMap[name.toLowerCase().trim()] || name.trim();\n  };\n  useEffect(() => {\n    // Load GeoJSON\n    fetch('/data/custom.geo.json').then(response => response.json()).then(data => {\n      setGeoJsonData(data);\n      console.log('GeoJSON Loaded. Countries:');\n      data.features.forEach(feature => {\n        var _feature$properties;\n        console.log('Country in GeoJSON:', (_feature$properties = feature.properties) === null || _feature$properties === void 0 ? void 0 : _feature$properties.name);\n      });\n    }).catch(err => console.error('Error loading GeoJSON:', err));\n\n    // Load Thyroid Cancer Data\n    fetch('/data/thyroid_cancer_risk_data.csv').then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => {\n          const countries = new Set(results.data.map(row => normalizeCountryName(row.Country)));\n          setThyroidCountries(countries);\n          console.log('Thyroid CSV Countries:', [...countries]);\n        }\n      });\n    }).catch(err => console.error('Error loading Thyroid CSV:', err));\n\n    // Load Lung Cancer Data\n    fetch('/data/lung_cancer_prediction_dataset.csv').then(response => response.text()).then(csvText => {\n      Papa.parse(csvText, {\n        header: true,\n        skipEmptyLines: true,\n        complete: results => {\n          const countries = new Set(results.data.map(row => normalizeCountryName(row.Country)));\n          setLungCountries(countries);\n          console.log('Lung CSV Countries:', [...countries]);\n        }\n      });\n    }).catch(err => console.error('Error loading Lung CSV:', err));\n  }, []);\n  const getCountryStyle = feature => {\n    var _feature$properties2;\n    const countryName = (_feature$properties2 = feature.properties) === null || _feature$properties2 === void 0 ? void 0 : _feature$properties2.name;\n    console.log('Checking style for:', countryName);\n    if (selectedCountry && countryName !== selectedCountry) {\n      return {\n        color: '#cccccc',\n        weight: 1,\n        fillColor: '#e0e0e0',\n        fillOpacity: 0.3\n      }; // No Data\n    }\n    const isThyroid = thyroidCountries.has(countryName);\n    const isLung = lungCountries.has(countryName);\n    if (dataType === 'thyroid' && isThyroid) {\n      console.log(`Thyroid data found for ${countryName}`);\n      return {\n        color: '#005bff',\n        weight: 1,\n        fillColor: '#a3caff',\n        fillOpacity: 0.5\n      }; // Thyroid Cancer\n    } else if (dataType === 'lung' && isLung) {\n      console.log(`Lung data found for ${countryName}`);\n      return {\n        color: '#008000',\n        weight: 1,\n        fillColor: '#90ee90',\n        fillOpacity: 0.5\n      }; // Lung Cancer\n    } else {\n      return {\n        color: '#cccccc',\n        weight: 1,\n        fillColor: '#e0e0e0',\n        fillOpacity: 0.3\n      }; // No Data\n    }\n  };\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    children: [/*#__PURE__*/_jsxDEV(FilterPanel, {\n      selectedCountry: selectedCountry,\n      setSelectedCountry: setSelectedCountry,\n      dataType: dataType,\n      setDataType: setDataType\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 92,\n      columnNumber: 7\n    }, this), /*#__PURE__*/_jsxDEV(MapContainer, {\n      className: \"map-container\",\n      center: [20, 0],\n      zoom: 2.5,\n      zoomControl: false,\n      dragging: false,\n      doubleClickZoom: false,\n      scrollWheelZoom: false,\n      touchZoom: false,\n      keyboard: false,\n      attributionControl: false,\n      worldCopyJump: false,\n      children: [/*#__PURE__*/_jsxDEV(TileLayer, {\n        url: \"https://stamen-tiles.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\",\n        attribution: \"\\xA9 <a href=\\\"https://stamen.com/\\\">Stamen Design</a> \\xA9 <a href=\\\"https://www.openstreetmap.org/copyright\\\">OpenStreetMap</a>\"\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 112,\n        columnNumber: 9\n      }, this), geoJsonData && /*#__PURE__*/_jsxDEV(GeoJSON, {\n        data: geoJsonData,\n        style: getCountryStyle\n      }, void 0, false, {\n        fileName: _jsxFileName,\n        lineNumber: 118,\n        columnNumber: 11\n      }, this)]\n    }, void 0, true, {\n      fileName: _jsxFileName,\n      lineNumber: 99,\n      columnNumber: 7\n    }, this)]\n  }, void 0, true, {\n    fileName: _jsxFileName,\n    lineNumber: 91,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"lH4cHpJclrgP/a1e8O6kFNTNdFo=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useState","MapContainer","TileLayer","GeoJSON","Papa","FilterPanel","jsxDEV","_jsxDEV","WorldMap","_s","geoJsonData","setGeoJsonData","thyroidCountries","setThyroidCountries","Set","lungCountries","setLungCountries","selectedCountry","setSelectedCountry","dataType","setDataType","normalizeCountryName","name","countryMap","toLowerCase","trim","fetch","then","response","json","data","console","log","features","forEach","feature","_feature$properties","properties","catch","err","error","text","csvText","parse","header","skipEmptyLines","complete","results","countries","map","row","Country","getCountryStyle","_feature$properties2","countryName","color","weight","fillColor","fillOpacity","isThyroid","has","isLung","children","fileName","_jsxFileName","lineNumber","columnNumber","className","center","zoom","zoomControl","dragging","doubleClickZoom","scrollWheelZoom","touchZoom","keyboard","attributionControl","worldCopyJump","url","attribution","style","_c","$RefreshReg$"],"sources":["C:/Users/oldma/OneDrive/Documents/DATA101---Data-Visualization-Dashboard-Project/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport { MapContainer, TileLayer, GeoJSON } from 'react-leaflet';\r\nimport Papa from 'papaparse';\r\nimport FilterPanel from './FilterPanel';\r\n\r\nconst WorldMap = () => {\r\n  const [geoJsonData, setGeoJsonData] = useState(null);\r\n  const [thyroidCountries, setThyroidCountries] = useState(new Set());\r\n  const [lungCountries, setLungCountries] = useState(new Set());\r\n  const [selectedCountry, setSelectedCountry] = useState('');\r\n  const [dataType, setDataType] = useState('lung');\r\n\r\n  const normalizeCountryName = (name) => {\r\n    const countryMap = {\r\n      'usa': 'United States of America',\r\n      'uk': 'United Kingdom',\r\n      'dr congo': 'Dem. Rep. Congo'\r\n    };\r\n    return countryMap[name.toLowerCase().trim()] || name.trim();\r\n  };\r\n\r\n  useEffect(() => {\r\n    // Load GeoJSON\r\n    fetch('/data/custom.geo.json')\r\n      .then(response => response.json())\r\n      .then(data => {\r\n        setGeoJsonData(data);\r\n        console.log('GeoJSON Loaded. Countries:');\r\n        data.features.forEach(feature => {\r\n          console.log('Country in GeoJSON:', feature.properties?.name);\r\n        });\r\n      })\r\n      .catch(err => console.error('Error loading GeoJSON:', err));\r\n\r\n    // Load Thyroid Cancer Data\r\n    fetch('/data/thyroid_cancer_risk_data.csv')\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => {\r\n            const countries = new Set(results.data.map(row => normalizeCountryName(row.Country)));\r\n            setThyroidCountries(countries);\r\n            console.log('Thyroid CSV Countries:', [...countries]);\r\n          },\r\n        });\r\n      })\r\n      .catch(err => console.error('Error loading Thyroid CSV:', err));\r\n\r\n    // Load Lung Cancer Data\r\n    fetch('/data/lung_cancer_prediction_dataset.csv')\r\n      .then(response => response.text())\r\n      .then(csvText => {\r\n        Papa.parse(csvText, {\r\n          header: true,\r\n          skipEmptyLines: true,\r\n          complete: (results) => {\r\n            const countries = new Set(results.data.map(row => normalizeCountryName(row.Country)));\r\n            setLungCountries(countries);\r\n            console.log('Lung CSV Countries:', [...countries]);\r\n          },\r\n        });\r\n      })\r\n      .catch(err => console.error('Error loading Lung CSV:', err));\r\n  }, []);\r\n\r\n  const getCountryStyle = (feature) => {\r\n    const countryName = feature.properties?.name;\r\n    console.log('Checking style for:', countryName);\r\n    \r\n    if (selectedCountry && countryName !== selectedCountry) {\r\n      return { color: '#cccccc', weight: 1, fillColor: '#e0e0e0', fillOpacity: 0.3 }; // No Data\r\n    }\r\n\r\n    const isThyroid = thyroidCountries.has(countryName);\r\n    const isLung = lungCountries.has(countryName);\r\n\r\n    if (dataType === 'thyroid' && isThyroid) {\r\n      console.log(`Thyroid data found for ${countryName}`);\r\n      return { color: '#005bff', weight: 1, fillColor: '#a3caff', fillOpacity: 0.5 }; // Thyroid Cancer\r\n    } else if (dataType === 'lung' && isLung) {\r\n      console.log(`Lung data found for ${countryName}`);\r\n      return { color: '#008000', weight: 1, fillColor: '#90ee90', fillOpacity: 0.5 }; // Lung Cancer\r\n    } else {\r\n      return { color: '#cccccc', weight: 1, fillColor: '#e0e0e0', fillOpacity: 0.3 }; // No Data\r\n    }\r\n  };\r\n\r\n  return (\r\n    <div>\r\n      <FilterPanel \r\n        selectedCountry={selectedCountry} \r\n        setSelectedCountry={setSelectedCountry} \r\n        dataType={dataType} \r\n        setDataType={setDataType} \r\n      />\r\n\r\n      <MapContainer\r\n        className=\"map-container\"\r\n        center={[20, 0]}\r\n        zoom={2.5}\r\n        zoomControl={false}\r\n        dragging={false}\r\n        doubleClickZoom={false}\r\n        scrollWheelZoom={false}\r\n        touchZoom={false}\r\n        keyboard={false}\r\n        attributionControl={false}\r\n        worldCopyJump={false}\r\n      >\r\n        <TileLayer\r\n          url=\"https://stamen-tiles.a.ssl.fastly.net/toner/{z}/{x}/{y}.png\"\r\n          attribution='&copy; <a href=\"https://stamen.com/\">Stamen Design</a> &copy; <a href=\"https://www.openstreetmap.org/copyright\">OpenStreetMap</a>'\r\n        />\r\n\r\n        {geoJsonData && (\r\n          <GeoJSON\r\n            data={geoJsonData}\r\n            style={getCountryStyle}\r\n          />\r\n        )}\r\n      </MapContainer>\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;"],"mappings":"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","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}