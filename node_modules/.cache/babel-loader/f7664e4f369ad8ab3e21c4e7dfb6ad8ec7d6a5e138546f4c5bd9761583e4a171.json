{"ast":null,"code":"var _jsxFileName = \"C:\\\\Users\\\\oldma\\\\OneDrive\\\\Documents\\\\DATA101---Data-Visualization-Dashboard-Project\\\\src\\\\components\\\\WorldMap.js\",\n  _s = $RefreshSig$();\nimport React, { useEffect, useState } from 'react';\nimport Plot from 'react-plotly.js';\nimport Papa from 'papaparse';\nimport { jsxDEV as _jsxDEV } from \"react/jsx-dev-runtime\";\nconst WorldMap = ({\n  dataType\n}) => {\n  _s();\n  const [geoData, setGeoData] = useState([]);\n  useEffect(() => {\n    const fileName = dataType === 'lung' ? '/data/lung_cancer_prediction_dataset.csv' : '/data/thyroid_cancer_risk_data.csv';\n    Papa.parse(fileName, {\n      download: true,\n      header: true,\n      complete: result => setGeoData(result.data),\n      error: error => console.error('Error loading CSV:', error)\n    });\n  }, [dataType]);\n  const filteredData = geoData.map(item => ({\n    country: item.country || item.Country,\n    value: parseFloat(item[dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate']) || 0\n  }));\n  return /*#__PURE__*/_jsxDEV(\"div\", {\n    style: {\n      width: '100vw',\n      height: '100vh'\n    },\n    children: /*#__PURE__*/_jsxDEV(Plot, {\n      data: [{\n        type: 'choropleth',\n        locationmode: 'country names',\n        locations: filteredData.map(item => item.country),\n        z: filteredData.map(item => item.value),\n        colorscale: 'Reds',\n        colorbar: {\n          title: dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate'\n        }\n      }],\n      layout: {\n        geo: {\n          projection: {\n            type: 'natural earth'\n          },\n          showland: true,\n          landcolor: '#E5E5E5',\n          countrycolor: '#B3B3B3',\n          showlakes: true,\n          lakecolor: '#FFFFFF',\n          scrollZoom: true\n        },\n        autosize: true,\n        margin: {\n          t: 0,\n          b: 0,\n          l: 0,\n          r: 0\n        }\n      },\n      style: {\n        width: '100%',\n        height: '100%'\n      }\n    }, void 0, false, {\n      fileName: _jsxFileName,\n      lineNumber: 28,\n      columnNumber: 7\n    }, this)\n  }, void 0, false, {\n    fileName: _jsxFileName,\n    lineNumber: 27,\n    columnNumber: 5\n  }, this);\n};\n_s(WorldMap, \"DTx/+txVyGLI+xY3f73mxBsXdJA=\");\n_c = WorldMap;\nexport default WorldMap;\nvar _c;\n$RefreshReg$(_c, \"WorldMap\");","map":{"version":3,"names":["React","useEffect","useState","Plot","Papa","jsxDEV","_jsxDEV","WorldMap","dataType","_s","geoData","setGeoData","fileName","parse","download","header","complete","result","data","error","console","filteredData","map","item","country","Country","value","parseFloat","style","width","height","children","type","locationmode","locations","z","colorscale","colorbar","title","layout","geo","projection","showland","landcolor","countrycolor","showlakes","lakecolor","scrollZoom","autosize","margin","t","b","l","r","_jsxFileName","lineNumber","columnNumber","_c","$RefreshReg$"],"sources":["C:/Users/oldma/OneDrive/Documents/DATA101---Data-Visualization-Dashboard-Project/src/components/WorldMap.js"],"sourcesContent":["import React, { useEffect, useState } from 'react';\r\nimport Plot from 'react-plotly.js';\r\nimport Papa from 'papaparse';\r\n\r\nconst WorldMap = ({ dataType }) => {\r\n  const [geoData, setGeoData] = useState([]);\r\n\r\n  useEffect(() => {\r\n    const fileName = dataType === 'lung' \r\n      ? '/data/lung_cancer_prediction_dataset.csv'\r\n      : '/data/thyroid_cancer_risk_data.csv';\r\n\r\n    Papa.parse(fileName, {\r\n      download: true,\r\n      header: true,\r\n      complete: (result) => setGeoData(result.data),\r\n      error: (error) => console.error('Error loading CSV:', error),\r\n    });\r\n  }, [dataType]);\r\n\r\n  const filteredData = geoData.map((item) => ({\r\n    country: item.country || item.Country,\r\n    value: parseFloat(item[dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate']) || 0,\r\n  }));\r\n\r\n  return (\r\n    <div style={{ width: '100vw', height: '100vh' }}>\r\n      <Plot\r\n        data={[\r\n          {\r\n            type: 'choropleth',\r\n            locationmode: 'country names',\r\n            locations: filteredData.map((item) => item.country),\r\n            z: filteredData.map((item) => item.value),\r\n            colorscale: 'Reds',\r\n            colorbar: { title: dataType === 'lung' ? 'Lung Cancer Rate' : 'Thyroid Cancer Rate' }\r\n          }\r\n        ]}\r\n        layout={{\r\n          geo: {\r\n            projection: { type: 'natural earth' },\r\n            showland: true,\r\n            landcolor: '#E5E5E5',\r\n            countrycolor: '#B3B3B3',\r\n            showlakes: true,\r\n            lakecolor: '#FFFFFF',\r\n            scrollZoom: true,\r\n          },\r\n          autosize: true,\r\n          margin: { t: 0, b: 0, l: 0, r: 0 },\r\n        }}\r\n        style={{ width: '100%', height: '100%' }}\r\n      />\r\n    </div>\r\n  );\r\n};\r\n\r\nexport default WorldMap;\r\n"],"mappings":";;AAAA,OAAOA,KAAK,IAAIC,SAAS,EAAEC,QAAQ,QAAQ,OAAO;AAClD,OAAOC,IAAI,MAAM,iBAAiB;AAClC,OAAOC,IAAI,MAAM,WAAW;AAAC,SAAAC,MAAA,IAAAC,OAAA;AAE7B,MAAMC,QAAQ,GAAGA,CAAC;EAAEC;AAAS,CAAC,KAAK;EAAAC,EAAA;EACjC,MAAM,CAACC,OAAO,EAAEC,UAAU,CAAC,GAAGT,QAAQ,CAAC,EAAE,CAAC;EAE1CD,SAAS,CAAC,MAAM;IACd,MAAMW,QAAQ,GAAGJ,QAAQ,KAAK,MAAM,GAChC,0CAA0C,GAC1C,oCAAoC;IAExCJ,IAAI,CAACS,KAAK,CAACD,QAAQ,EAAE;MACnBE,QAAQ,EAAE,IAAI;MACdC,MAAM,EAAE,IAAI;MACZC,QAAQ,EAAGC,MAAM,IAAKN,UAAU,CAACM,MAAM,CAACC,IAAI,CAAC;MAC7CC,KAAK,EAAGA,KAAK,IAAKC,OAAO,CAACD,KAAK,CAAC,oBAAoB,EAAEA,KAAK;IAC7D,CAAC,CAAC;EACJ,CAAC,EAAE,CAACX,QAAQ,CAAC,CAAC;EAEd,MAAMa,YAAY,GAAGX,OAAO,CAACY,GAAG,CAAEC,IAAI,KAAM;IAC1CC,OAAO,EAAED,IAAI,CAACC,OAAO,IAAID,IAAI,CAACE,OAAO;IACrCC,KAAK,EAAEC,UAAU,CAACJ,IAAI,CAACf,QAAQ,KAAK,MAAM,GAAG,kBAAkB,GAAG,qBAAqB,CAAC,CAAC,IAAI;EAC/F,CAAC,CAAC,CAAC;EAEH,oBACEF,OAAA;IAAKsB,KAAK,EAAE;MAAEC,KAAK,EAAE,OAAO;MAAEC,MAAM,EAAE;IAAQ,CAAE;IAAAC,QAAA,eAC9CzB,OAAA,CAACH,IAAI;MACHe,IAAI,EAAE,CACJ;QACEc,IAAI,EAAE,YAAY;QAClBC,YAAY,EAAE,eAAe;QAC7BC,SAAS,EAAEb,YAAY,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACC,OAAO,CAAC;QACnDW,CAAC,EAAEd,YAAY,CAACC,GAAG,CAAEC,IAAI,IAAKA,IAAI,CAACG,KAAK,CAAC;QACzCU,UAAU,EAAE,MAAM;QAClBC,QAAQ,EAAE;UAAEC,KAAK,EAAE9B,QAAQ,KAAK,MAAM,GAAG,kBAAkB,GAAG;QAAsB;MACtF,CAAC,CACD;MACF+B,MAAM,EAAE;QACNC,GAAG,EAAE;UACHC,UAAU,EAAE;YAAET,IAAI,EAAE;UAAgB,CAAC;UACrCU,QAAQ,EAAE,IAAI;UACdC,SAAS,EAAE,SAAS;UACpBC,YAAY,EAAE,SAAS;UACvBC,SAAS,EAAE,IAAI;UACfC,SAAS,EAAE,SAAS;UACpBC,UAAU,EAAE;QACd,CAAC;QACDC,QAAQ,EAAE,IAAI;QACdC,MAAM,EAAE;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE,CAAC;UAAEC,CAAC,EAAE;QAAE;MACnC,CAAE;MACFzB,KAAK,EAAE;QAAEC,KAAK,EAAE,MAAM;QAAEC,MAAM,EAAE;MAAO;IAAE;MAAAlB,QAAA,EAAA0C,YAAA;MAAAC,UAAA;MAAAC,YAAA;IAAA,OAC1C;EAAC;IAAA5C,QAAA,EAAA0C,YAAA;IAAAC,UAAA;IAAAC,YAAA;EAAA,OACC,CAAC;AAEV,CAAC;AAAC/C,EAAA,CAnDIF,QAAQ;AAAAkD,EAAA,GAARlD,QAAQ;AAqDd,eAAeA,QAAQ;AAAC,IAAAkD,EAAA;AAAAC,YAAA,CAAAD,EAAA","ignoreList":[]},"metadata":{},"sourceType":"module","externalDependencies":[]}